Init:
	@256
	D=A
	@SP
	M=D //set SP to 256
	@Sys.init
	D;JMP

	


Stack:
	push variable x:
	@x
	D=M
	@0 //SP
	A=M
	M=D
	@0 //SP
	M=M+1
	
	pop variable x:
	@0
	M=M-1
	A=M
	D=M
	@x
	M=D
	
	push constant x:
	@x
	D=A
	@0 //SP
	A=M
	M=D
	@0 //SP
	M=M+1
	
Arithmatic:

	add: //add the 2 top most value in stack while popping both then push result
	@0
	M=M-1 //decrement SP
	A=M
	D=M //store top most entry in stack in D
	@0
	M=M-1 //decrement SP again
	A=M
	M=D+M //add
	@0
	M=M+1 //increment SP
	

	sub: //substract the top-1 entry in stack by the top entry on stack, pop both, push result on stack
	@0
	M=M-1 //decrement SP
	A=M
	D=M //store top most entry in stack in D
	@0
	M=M-1 //decrement SP again
	A=M
	M=M-D //sub
	@0
	M=M+1 //increment SP
	
	neg: //x = -x
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	D=A-D //compute -x
	A=M
	M=D
	@0
	M=M+1 //increment SP again
	
	eq: //check if x and y are equal, store true if true and false if false
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	M=M-1 //decrement SP again
	A=M
	D=M-D
	@EQ_TRUE
	D;JEQ
	@EQ_FALSE
	D;JMP
	
	(EQ_TRUE)	
	@-1 //boolean true, also 0xFFFF
	D=A
	@0
	A=M
	M=D
	@EQ_END
	D;JMP
	
	(EQ_FALSE)	
	@0 //boolean false, also 0x0
	D=A
	A=M //no need to preface with @0 because a is already 0
	M=D
	
	(EQ_END)	
	@0
	M=M+1 //incrementing SP
	

	
	gt: //check if x > y, store result (x = stacktop-1, y=stacktop)
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	M=M-1 //decrement SP again
	A=M
	D=M-D
	@GT_TRUE
	D;JGT
	@GT_FALSE
	D;JMP
	
	(GT_TRUE)	
	@-1 //boolean true, also 0xFFFF
	D=A
	@0
	A=M
	M=D
	@GT_END
	D;JMP
	
	(GT_FALSE)	
	@0 //boolean false, also 0x0
	D=A
	A=M
	M=D
	
	(GT_END)	
	@0
	M=M+1 //incrementing SP


	lt: //check if x < y, store result (x = stacktop-1, y=stacktop)
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	M=M-1 //decrement SP again
	A=M
	D=M-D
	@LT_TRUE
	D;JLT
	@LT_FALSE
	D;JMP
	
	(LT_TRUE)	
	@-1 //boolean true, also 0xFFFF
	D=A
	@0
	A=M
	M=D
	@LT_END
	D;JMP
	
	(LT_FALSE)	
	@0 //boolean false, also 0x0
	D=A
	A=M
	M=D
	
	(LT_END)	
	@0
	M=M+1 //incrementing SP





	and: //store AND of x and y
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	M=M-1 //decrement SP again
	A=M
	M=D&M //compute AND
	@0
	M=M+1 //increment SP
	


	or: //store OR of x and y
	@0
	M=M-1 //decrement SP
	A=M
	D=M
	@0
	M=M-1 //decrement SP again
	A=M
	M=D|M //compute OR
	@0
	M=M+1 //increment SP
	
	not: //store NOT y
	@0
	M=M-1 //decrement SP
	A=M
	M=!M
	@0
	M=M+1 //increment SP
	
	
Pointer:

	push pointer x:
	@3+x
	D=M
	@0 //SP
	A=M
	M=D
	@0 //SP
	M=M+1

	pop pointer x:
	@0
	M=M-1
	A=M
	D=M
	@3+x
	M=D

This/That:

	push this/that x:
	@THIS/THAT
	D=M
	@x
	A=D+A //compute location we want to access
	D=M
	@0 //SP
	A=M
	M=D
	@0 //SP
	M=M+1

	pop this/that x:
	@THIS/THAT
	D=M
	@x
	D=D+A
	@temp_this_that
	M=D //storing THIS/THAT+x for use later
	@0 //SP
	M=M-1
	A=M
	D=M
	@temp_this_that
	A=M
	M=D

Local/Argument:
	Same as This/That but with LCL and ARG instead of THIS and THAT and @temp_lcl_arg instead of @temp_this_that


Function Calling:

	ARG = SP-n-5:
	@0
	D=M
	@n
	D=D-A
	@5
	D=D-A
	@ARG
	M=D

	LCL = SP:
	@0
	D=M
	@LCL
	M=D

Function Returning:

	FRAME = LCL:
	@LCL
	D=M
	@R5 //FRAME
	M=D

	RET = *(FRAME-5):
	@R5 //FRAME
	D=M
	@5
	A=D-A //A=FRAME-5
	D=M
	@R6 //RET
	M=D

	*ARG = pop():
	@SP
	M=M-1
	A=M
	D=M
	@ARG
	A=M
	M=D

	SP = ARG+1:
	@ARG
	D=M+1
	@SP
	M=D

	THAT = *(FRAME-1)
	THIS = *(FRAME-2)
	ARG = *(FRAME-3)
	LCL = *(FRAME-4):
	@R5 
	D=M //FRAME
	@1
	A=D-A //FRAME-1
	D=M //*(FRAME-1)
	@THAT
	M=D
	@R5 
	D=M //FRAME
	@2
	A=D-A //FRAME-2
	D=M //*(FRAME-2)
	@THIS
	M=D
	@R5 
	D=M //FRAME
	@3
	A=D-A //FRAME-3
	D=M //*(FRAME-3)
	@ARG
	M=D
	@R5 
	D=M //FRAME
	@4
	A=D-A //FRAME-4
	D=M //*(FRAME-4)
	@LCL
	M=D

	Goto RET:
	@R6 //RET
	D;JMP

